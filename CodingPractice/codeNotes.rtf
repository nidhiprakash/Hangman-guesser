{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue109;\red128\green63\blue122;\red109\green109\blue109;
\red0\green0\blue254;\red14\green110\blue109;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c42745;\csgenericrgb\c50196\c24706\c47843;\csgenericrgb\c42745\c42745\c42745;
\csgenericrgb\c0\c0\c99608;\csgenericrgb\c5490\c43137\c42745;}
\margl1440\margr1440\vieww17560\viewh11640\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 def 
\f1\b0 \cf0 guess(\cf3 self\cf0 , word):  
\f2\i \cf4 # word input example: "_ p p _ e "\
    ###############################################\
    # Replace with your own "guess" function here #\
    ###############################################\
\
    # clean the word so that we strip away the space characters\
    # replace "_" with "." as "." indicates any character in regular expressions\
    
\f1\i0 \cf0 clean_word = word[::\cf5 2\cf0 ].replace(
\f0\b \cf6 "_"
\f1\b0 \cf0 , 
\f0\b \cf6 "."
\f1\b0 \cf0 )\
\
    
\f2\i \cf4 # find length of passed word\
    
\f1\i0 \cf0 len_word = \cf2 len\cf0 (clean_word)\
\
    
\f2\i \cf4 # grab current dictionary of possible words from self object, initialize new possible words dictionary to empty\
    
\f1\i0 \cf0 current_dictionary = \cf3 self\cf0 .current_dictionary\
    new_dictionary = []\
\
    
\f2\i \cf4 # iterate through all of the words in the old plausible dictionary\
    
\f0\i0\b \cf2 for 
\f1\b0 \cf0 dict_word 
\f0\b \cf2 in 
\f1\b0 \cf0 current_dictionary:\
        
\f2\i \cf4 # continue if the word is not of the appropriate length\
        
\f0\i0\b \cf2 if 
\f1\b0 len\cf0 (dict_word) != len_word:\
            
\f0\b \cf2 continue\
\
        
\f2\i\b0 \cf4 # if dictionary word is a possible match then add it to the current dictionary\
        
\f0\i0\b \cf2 if 
\f1\b0 \cf0 re.match(clean_word, dict_word):\
            new_dictionary.append(dict_word)\
\
    
\f2\i \cf4 # overwrite old possible words dictionary with updated version\
    
\f1\i0 \cf3 self\cf0 .current_dictionary = new_dictionary\
\
    
\f2\i \cf4 # count occurrence of all characters in possible word matches\
    
\f1\i0 \cf0 full_dict_string = 
\f0\b \cf6 ""
\f1\b0 \cf0 .join(new_dictionary)\
\
    c = collections.Counter(full_dict_string)\
    sorted_letter_count = c.most_common()\
\
    guess_letter = 
\f0\b \cf6 '!'\
\
    
\f2\i\b0 \cf4 # return most frequently occurring letter in all possible words that hasn't been guessed yet\
    
\f0\i0\b \cf2 for 
\f1\b0 \cf0 letter, instance_count 
\f0\b \cf2 in 
\f1\b0 \cf0 sorted_letter_count:\
        
\f0\b \cf2 if 
\f1\b0 \cf0 letter 
\f0\b \cf2 not in 
\f1\b0 \cf3 self\cf0 .guessed_letters:\
            guess_letter = letter\
            
\f0\b \cf2 break\
\
    
\f2\i\b0 \cf4 # if no word matches in training dictionary, default back to ordering of full dictionary\
    
\f0\i0\b \cf2 if 
\f1\b0 \cf0 guess_letter == 
\f0\b \cf6 '!'
\f1\b0 \cf0 :\
        sorted_letter_count = \cf3 self\cf0 .full_dictionary_common_letter_sorted\
        
\f0\b \cf2 for 
\f1\b0 \cf0 letter, instance_count 
\f0\b \cf2 in 
\f1\b0 \cf0 sorted_letter_count:\
            
\f0\b \cf2 if 
\f1\b0 \cf0 letter 
\f0\b \cf2 not in 
\f1\b0 \cf3 self\cf0 .guessed_letters:\
                guess_letter = letter\
                
\f0\b \cf2 break\
\
    return 
\f1\b0 \cf0 guess_letter\
}



                ## update guess counter to progress until next correct guess is made
                if newGuessedWordString != oldGuessedWordString:
                    guessNextLetter = 0
                    oldGuessedWordString = newGuessedWordString
                else:
                    guessPosition += 1